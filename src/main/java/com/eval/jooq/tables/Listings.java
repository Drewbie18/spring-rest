/*
 * This file is generated by jOOQ.
 */
package com.eval.jooq.tables;


import com.eval.jooq.Eval;
import com.eval.jooq.Indexes;
import com.eval.jooq.Keys;
import com.eval.jooq.tables.records.ListingsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Listings extends TableImpl<ListingsRecord> {

    private static final long serialVersionUID = -1738076612;

    /**
     * The reference instance of <code>eval.listings</code>
     */
    public static final Listings LISTINGS = new Listings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListingsRecord> getRecordType() {
        return ListingsRecord.class;
    }

    /**
     * The column <code>eval.listings.listing_id</code>.
     */
    public final TableField<ListingsRecord, Integer> LISTING_ID = createField("listing_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>eval.listings.seller_id</code>.
     */
    public final TableField<ListingsRecord, Integer> SELLER_ID = createField("seller_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eval.listings.event_id</code>.
     */
    public final TableField<ListingsRecord, Integer> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eval.listings.date_id</code>.
     */
    public final TableField<ListingsRecord, Integer> DATE_ID = createField("date_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eval.listings.num_tickets</code>.
     */
    public final TableField<ListingsRecord, Integer> NUM_TICKETS = createField("num_tickets", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eval.listings.price_ticket</code>.
     */
    public final TableField<ListingsRecord, Double> PRICE_TICKET = createField("price_ticket", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>eval.listings.total_price</code>.
     */
    public final TableField<ListingsRecord, Double> TOTAL_PRICE = createField("total_price", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>eval.listings.list_timestamp</code>.
     */
    public final TableField<ListingsRecord, Timestamp> LIST_TIMESTAMP = createField("list_timestamp", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>eval.listings</code> table reference
     */
    public Listings() {
        this(DSL.name("listings"), null);
    }

    /**
     * Create an aliased <code>eval.listings</code> table reference
     */
    public Listings(String alias) {
        this(DSL.name(alias), LISTINGS);
    }

    /**
     * Create an aliased <code>eval.listings</code> table reference
     */
    public Listings(Name alias) {
        this(alias, LISTINGS);
    }

    private Listings(Name alias, Table<ListingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Listings(Name alias, Table<ListingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Listings(Table<O> child, ForeignKey<O, ListingsRecord> key) {
        super(child, key, LISTINGS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Eval.EVAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LISTINGS_DATE, Indexes.LISTINGS_EVENT, Indexes.LISTINGS_PRIMARY, Indexes.LISTINGS_SELLER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ListingsRecord> getPrimaryKey() {
        return Keys.KEY_LISTINGS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ListingsRecord>> getKeys() {
        return Arrays.<UniqueKey<ListingsRecord>>asList(Keys.KEY_LISTINGS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ListingsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ListingsRecord, ?>>asList(Keys.LISTINGS_IBFK_1, Keys.LISTINGS_IBFK_2, Keys.LISTINGS_IBFK_3);
    }

    public Users users() {
        return new Users(this, Keys.LISTINGS_IBFK_1);
    }

    public Events events() {
        return new Events(this, Keys.LISTINGS_IBFK_2);
    }

    public Dates dates() {
        return new Dates(this, Keys.LISTINGS_IBFK_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Listings as(String alias) {
        return new Listings(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Listings as(Name alias) {
        return new Listings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Listings rename(String name) {
        return new Listings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Listings rename(Name name) {
        return new Listings(name, null);
    }
}
