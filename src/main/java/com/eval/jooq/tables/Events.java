/*
 * This file is generated by jOOQ.
 */
package com.eval.jooq.tables;


import com.eval.jooq.Eval;
import com.eval.jooq.Indexes;
import com.eval.jooq.Keys;
import com.eval.jooq.tables.records.EventsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Events extends TableImpl<EventsRecord> {

    private static final long serialVersionUID = 1923713539;

    /**
     * The reference instance of <code>eval.events</code>
     */
    public static final Events EVENTS = new Events();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsRecord> getRecordType() {
        return EventsRecord.class;
    }

    /**
     * The column <code>eval.events.event_id</code>.
     */
    public final TableField<EventsRecord, Integer> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>eval.events.venue_id</code>.
     */
    public final TableField<EventsRecord, Integer> VENUE_ID = createField("venue_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eval.events.category_id</code>.
     */
    public final TableField<EventsRecord, Integer> CATEGORY_ID = createField("category_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eval.events.date_id</code>.
     */
    public final TableField<EventsRecord, Integer> DATE_ID = createField("date_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eval.events.event_name</code>.
     */
    public final TableField<EventsRecord, String> EVENT_NAME = createField("event_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>eval.events.event_start_time</code>.
     */
    public final TableField<EventsRecord, Timestamp> EVENT_START_TIME = createField("event_start_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>eval.events</code> table reference
     */
    public Events() {
        this(DSL.name("events"), null);
    }

    /**
     * Create an aliased <code>eval.events</code> table reference
     */
    public Events(String alias) {
        this(DSL.name(alias), EVENTS);
    }

    /**
     * Create an aliased <code>eval.events</code> table reference
     */
    public Events(Name alias) {
        this(alias, EVENTS);
    }

    private Events(Name alias, Table<EventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Events(Name alias, Table<EventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Events(Table<O> child, ForeignKey<O, EventsRecord> key) {
        super(child, key, EVENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Eval.EVAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENTS_EVENT_CATEGORY, Indexes.EVENTS_EVENT_DATE, Indexes.EVENTS_EVENT_VENUE, Indexes.EVENTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EventsRecord> getPrimaryKey() {
        return Keys.KEY_EVENTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventsRecord>> getKeys() {
        return Arrays.<UniqueKey<EventsRecord>>asList(Keys.KEY_EVENTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EventsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventsRecord, ?>>asList(Keys.EVENTS_IBFK_1, Keys.EVENTS_IBFK_2, Keys.EVENTS_IBFK_3);
    }

    public Venues venues() {
        return new Venues(this, Keys.EVENTS_IBFK_1);
    }

    public Categories categories() {
        return new Categories(this, Keys.EVENTS_IBFK_2);
    }

    public Dates dates() {
        return new Dates(this, Keys.EVENTS_IBFK_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Events as(String alias) {
        return new Events(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Events as(Name alias) {
        return new Events(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(String name) {
        return new Events(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(Name name) {
        return new Events(name, null);
    }
}
